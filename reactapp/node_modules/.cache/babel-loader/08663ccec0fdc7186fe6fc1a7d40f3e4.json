{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar collection_1 = require(\"../util/collection\");\n\nvar Hooks =\n/** @class */\nfunction () {\n  function Hooks() {\n    this.map = {};\n  }\n\n  Hooks.prototype.set = function (hook, handler) {\n    if (!this.map.hasOwnProperty(hook)) {\n      this.map[hook] = [];\n    }\n\n    var value = {\n      handler: handler,\n      remove: function remove() {}\n    };\n    var remove = collection_1.addAndRemoveFromCollection(this.map[hook], value);\n    value = {\n      handler: handler,\n      remove: remove\n    };\n    return remove;\n  };\n\n  Hooks.prototype.get = function (hook) {\n    var value = this.map[hook];\n    return value ? value.map(function (val) {\n      return val.handler;\n    }) : undefined;\n  };\n\n  Hooks.prototype.run = function (hook, final, context) {\n    var initialArgs = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      initialArgs[_i - 3] = arguments[_i];\n    }\n\n    var index = 0;\n    var handlers = this.get(hook) || [];\n\n    function handler() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var childHandler = handlers[index++];\n\n      if (childHandler) {\n        return childHandler(handler).apply(context, args);\n      }\n\n      return final.apply(context, args);\n    }\n\n    return handler.apply(context, initialArgs);\n  };\n\n  return Hooks;\n}();\n\nexports.default = Hooks;","map":null,"metadata":{},"sourceType":"script"}