// Generated by CoffeeScript 1.9.0
(function() {
  var init, teacup, widget,
    __hasProp = {}.hasOwnProperty;

  widget = function(tag_name, f) {
    var class_name, ctx, re, widget_name;
    re = /(^.|-.)/gi;
    class_name = tag_name.replace(re, function(x) {
      return (x.substr(x.length - 1)).toUpperCase();
    });
    re = /-/g;
    widget_name = tag_name.replace(re, '_');
    ctx = {
      tag_name: tag_name,
      class_name: class_name,
      widget_name: widget_name
    };
    ctx._tag = function(f) {
      var tag;
      tag = teacup.tag;
      return tag(tag_name, {
        params: "value:" + f + ",$root:$root"
      });
    };
    ctx.data = ctx.constructor = ctx.model = function(data) {
      return ctx._data = data;
    };
    ctx.view = function(view) {
      return ctx._view = view;
    };
    ctx.html = function(html) {
      return ctx._html = html;
    };
    return function(ko) {
      var DefaultData, res;
      init(ko);
      ctx.ko = ko;
      f.call(ctx, ko);
      if (ctx._data == null) {
        ctx._data = DefaultData = (function() {
          function DefaultData(value) {
            var k, v;
            if (typeof value === 'object') {
              for (k in value) {
                if (!__hasProp.call(value, k)) continue;
                v = value[k];
                this[k] = ko.observable(v);
              }
            } else {
              this.value = ko.observable(value);
            }
          }

          return DefaultData;

        })();
      }
      if (ctx._view == null) {
        ctx._view = function() {};
      }
      if (ctx._html == null) {
        ctx._html = function() {
          return "<!-- No html was provided in " + tag_name + " -->";
        };
      }
      if (ko.components.isRegistered(tag_name)) {
        console.log("Not registering " + tag_name + " twice.");
      } else {
        ko.components.register(tag_name, {
          viewModel: function(_arg) {
            var $root, k, v, value;
            value = _arg.value, $root = _arg.$root;
            for (k in value) {
              if (!__hasProp.call(value, k)) continue;
              v = value[k];
              this[k] = v;
            }
            return ctx._view.call(this, {
              value: value,
              $root: $root,
              ko: ko,
              data: value,
              doc: value
            });
          },
          template: {
            teacup: ctx._html
          }
        });
      }
      res = {
        tag_name: tag_name,
        widget_name: widget_name,
        class_name: class_name
      };
      res[widget_name] = ctx._tag;
      res[class_name] = ctx._data;
      return res;
    };
  };

  init = function(ko) {
    var loader;
    if (ko.__kow_init) {
      return;
    }
    ko.__kow_init = true;
    loader = {
      loadTemplate: function(name, config, next) {
        var html;
        if (config.teacup != null) {
          html = teacup.render(config.teacup, teacup);
          return ko.components.defaultLoader.loadTemplate(name, html, next);
        } else {
          return next(null);
        }
      }
    };

    /*
      loadViewModel: (name, config, next) ->
        if config.special
          constructor = ->
            config.special.apply this, arguments
          ko.components.defaultLoader.loadViewModel name, constructor, next
     */
    return ko.components.loaders.unshift(loader);
  };

  teacup = require('teacup');

  teacup.use((require('teacup-databind'))());

  module.exports = widget;

  module.exports.widget = widget;

}).call(this);
